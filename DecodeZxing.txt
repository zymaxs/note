/**
	 * https://github.com/zxing/zxing/blob/master/zxingorg/src/main/java/com/google/zxing/web/DecodeServlet.java
	 * 解码
	 * @param filePath
	 * @return
	 * @throws Exception 
	 */
	public static List<String> DecodeHint(String filePath) throws Exception {
		BufferedImage image = ImageIO.read(new File(filePath));
		Map HINTS = new EnumMap<>(DecodeHintType.class);
	    HINTS.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
	    HINTS.put(DecodeHintType.POSSIBLE_FORMATS, EnumSet.allOf(BarcodeFormat.class));
	    Map HINTS_PURE = new EnumMap<>(HINTS);
	    HINTS_PURE.put(DecodeHintType.PURE_BARCODE, Boolean.TRUE);
		LuminanceSource source = new BufferedImageLuminanceSource(image);
	    BinaryBitmap bitmap = new BinaryBitmap(new GlobalHistogramBinarizer(source));
	    Collection<Result> results = new ArrayList<>(1);

	    try {

	      Reader reader = new MultiFormatReader();
	      ReaderException savedException = null;
	      try {
	        // Look for multiple barcodes
	        MultipleBarcodeReader multiReader = new GenericMultipleBarcodeReader(reader);
	        Result[] theResults = multiReader.decodeMultiple(bitmap, HINTS);
	        if (theResults != null) {
	          results.addAll(Arrays.asList(theResults));
	        }
	      } catch (ReaderException re) {
	        savedException = re;
	      }
	  
	      if (results.isEmpty()) {
	        try {
	          // Look for pure barcode
	          Result theResult = reader.decode(bitmap, HINTS_PURE);
	          if (theResult != null) {
	            results.add(theResult);
	          }
	        } catch (ReaderException re) {
	          savedException = re;
	        }
	      }
	  
	      if (results.isEmpty()) {
	        try {
	          // Look for normal barcode in photo
	          Result theResult = reader.decode(bitmap, HINTS);
	          if (theResult != null) {
	            results.add(theResult);
	          }
	        } catch (ReaderException re) {
	          savedException = re;
	        }
	      }
	  
	      if (results.isEmpty()) {
	        try {
	          // Try again with other binarizer
	          BinaryBitmap hybridBitmap = new BinaryBitmap(new HybridBinarizer(source));
	          Result theResult = reader.decode(hybridBitmap, HINTS);
	          if (theResult != null) {
	            results.add(theResult);
	          }
	        } catch (ReaderException re) {
	          savedException = re;
	        }
	      }
	  

	    } catch (RuntimeException re) {
	    }
	    List<String> qrresults=new ArrayList<>();
	    for (Result result : results) {
	    	qrresults.add(result.getText());
	    }
		return qrresults;
	}