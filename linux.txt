打印时间
date '+%Y-%m-%d' -d  2019-01-01+1day   //2019-01-01的一天后 不输入为now
date '+%Y-%m-%d %H:%M:%S'

查找n天前的并删除
find . -mtime +5 -regex ".*com/[0-9]+" -exec rm -rf {} \;

统计系统tcp连接 time_wait 状态的数量

netstat -an |find /i "time_wait" /c

磁盘读写过高
linux：运行iostat -x 1检查await列。如果该列在负载下持续超过10(ms)，那么说明磁盘太慢或是磁盘过载。

监控命令
dstat 
perf top

cd /;du -sh *  从根路径查看硬盘占用情况
du -sh *  查看当前路径硬盘占用情况
du --max-depth=1 -ah 查询大文件

netstat -lnp | grep 20880  根据端口号查进程

ntpdate s2m.time.edu.cn

nginx定制日志
nginx.conf
log_format lvan '$remote_addr - $remote_user [$time_iso8601] "$request" $http_host '
'$status $body_bytes_sent "$http_referer" '
'"$http_user_agent" $http_x_forwarded_for '
'"$upstream_addr" $upstream_status "$upstream_cache_status" "$upstream_http_content_type" $upstream_response_time "$request_time" $request_length $bytes_sent $server_name';



Deploy.sh 发布脚本

IP=$1

echo "put tar to "${IP}
ftp -n<<!
open ${IP}
user uname pwd
binary
prompt
put test.jar
put restart.sh
close
bye
!

替换文本
find . *.xml|grep config.xml|xargs sed -i "s/ip:port/172.16.1.1:8080/g" 

cpu性能
/proc/stat
user (38082)    从系统启动开始累计到当前时刻，处于用户态的运行时间，不包含 nice值为负进程。
nice (627)      从系统启动开始累计到当前时刻，nice值为负的进程所占用的CPU时间
system (27594)  从系统启动开始累计到当前时刻，处于核心态的运行时间
idle (893908)   从系统启动开始累计到当前时刻，除IO等待时间以外的其它等待时间(空闲时间)
iowait (12256) 从系统启动开始累计到当前时刻，IO等待时间(since 2.5.41)
irq (581)           从系统启动开始累计到当前时刻，硬中断时间(since 2.6.0-test4)
softirq (895)      从系统启动开始累计到当前时刻，软中断时间(since 2.6.0-test4)
stealstolen(0) which is the time spent in other operating systems when running in a virtualized environment(since 2.6.11)
guest(0)  which is the time spent running a virtual  CPU  for  guest operating systems under the control of the Linux kernel(since 2.6.24)

io性能
/proc/diskstats (0开始6读10写)
前3个区域描述设备
第1个域：读磁盘的次数，成功完成读的总次数；

第2个域：合并读次数；

第3个域：读扇区的次数，成功读过的扇区总次数；

第4个域：读花费的毫秒数，这是所有读操作所花费的毫秒数；//基准

第5个域：写完成的次数，成功写完成的总次数；

第6个域：合并写次数，为了效率可能会合并相邻的读和写。从而两次4K的读在它最终被处理到磁盘上之前可能会变成一次8K的读，才被计数（和排队），因此只有一次I/O操作，这个域使你知道这样的操作有多频繁；

第7个域：写扇区的次数，成功写扇区总次数；

第8个域：写花费的毫秒数，这是所有写操作所花费的毫秒数；//基准

第9个域：I/O的当前进度，只有这个域应该是0。当请求被交给适当的request_queue_t时增加和请求完成时减小；

第10个域：花在I/O操作上的毫秒数，这个域会增长只要field 9不为0；

第11个域：加权，花在I/O操作上的毫秒数，在每次I/O开始，I/O结束，I/O合并时这个域都会增加。这可以给I/O完成时间和存储那些可以累积的提供一个便利的测量标准。


内存
/proc/meminfo
MemTotal:        2052440 kB //总内存
MemFree:           50004 kB //空闲内存
Buffers:           19976 kB //给文件的缓冲大小
Cached:           436412 kB //高速缓冲存储器(http://baike.baidu.com/view/496990.htm)使用的大小
SwapCached:        19864 kB //被高速缓冲存储用的交换空间大小
Active:          1144512 kB //活跃使用中的高速缓冲存储器页面文件大小
Inactive:         732788 kB //不经常使用的高速缓冲存储器页面文件大小
Active(anon):     987640 kB //anon：不久
Inactive(anon):   572512 kB
Active(file):     156872 kB
Inactive(file):   160276 kB
Unevictable:           8 kB
Mlocked:               8 kB
HighTotal:       1177160 kB //The total and free amount of memory, in kilobytes, that is not directly mapped into kernel space.
HighFree:           7396 kB // The HighTotal value can vary based on the type of kernel used.
LowTotal:         875280 kB // The total and free amount of memory, in kilobytes, that is directly mapped into kernel space.  used. 
LowFree:           42608 kB //The LowTotal value can vary based on the type of kernel
SwapTotal:        489940 kB //交换空间总大小
SwapFree:         450328 kB //空闲交换空间
Dirty:               104 kB //等待被写回到磁盘的大小
Writeback:             0 kB //正在被写回的大小
AnonPages:       1408256 kB //未映射的页的大小
Mapped:           131964 kB //设备和文件映射的大小
Slab:              37368 kB //内核数据结构缓存的大小，可减少申请和释放内存带来的消耗
SReclaimable:      14164 kB //可收回slab的大小
SUnreclaim:        23204 kB //不可收回的slab的大小23204+14164=37368
PageTables:        13308 kB //管理内存分页的索引表的大小
NFS_Unstable:          0 kB //不稳定页表的大小
Bounce:                0 kB //bounce:退回
WritebackTmp:          0 kB //
CommitLimit:     1516160 kB
Committed_AS:    2511900 kB
VmallocTotal:     122880 kB //虚拟内存大小
VmallocUsed:       28688 kB //已经被使用的虚拟内存大小
VmallocChunk:      92204 kB
HugePages_Total:       0 //大页面的分配
HugePages_Free:        0
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
DirectMap4k:       10232 kB
DirectMap2M:      899072 kB

ulimit -n 65000
vi /etc/security/limits.conf 
* - nofile 65000